// Code generated by MockGen. DO NOT EDIT.
// Source: character_tombstone.go

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCharacterTombstoneStore is a mock of CharacterTombstoneStore interface
type MockCharacterTombstoneStore struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterTombstoneStoreMockRecorder
}

// MockCharacterTombstoneStoreMockRecorder is the mock recorder for MockCharacterTombstoneStore
type MockCharacterTombstoneStoreMockRecorder struct {
	mock *MockCharacterTombstoneStore
}

// NewMockCharacterTombstoneStore creates a new mock instance
func NewMockCharacterTombstoneStore(ctrl *gomock.Controller) *MockCharacterTombstoneStore {
	mock := &MockCharacterTombstoneStore{ctrl: ctrl}
	mock.recorder = &MockCharacterTombstoneStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacterTombstoneStore) EXPECT() *MockCharacterTombstoneStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCharacterTombstoneStore) Create(cID int64) error {
	ret := m.ctrl.Call(m, "Create", cID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCharacterTombstoneStoreMockRecorder) Create(cID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCharacterTombstoneStore)(nil).Create), cID)
}

// Check mocks base method
func (m *MockCharacterTombstoneStore) Check(cID int64) (bool, error) {
	ret := m.ctrl.Call(m, "Check", cID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockCharacterTombstoneStoreMockRecorder) Check(cID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCharacterTombstoneStore)(nil).Check), cID)
}
