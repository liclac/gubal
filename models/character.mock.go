// Code generated by MockGen. DO NOT EDIT.
// Source: character.go

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCharacterStore is a mock of CharacterStore interface
type MockCharacterStore struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterStoreMockRecorder
}

// MockCharacterStoreMockRecorder is the mock recorder for MockCharacterStore
type MockCharacterStoreMockRecorder struct {
	mock *MockCharacterStore
}

// NewMockCharacterStore creates a new mock instance
func NewMockCharacterStore(ctrl *gomock.Controller) *MockCharacterStore {
	mock := &MockCharacterStore{ctrl: ctrl}
	mock.recorder = &MockCharacterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacterStore) EXPECT() *MockCharacterStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCharacterStore) Get(cID int64) (*Character, error) {
	ret := m.ctrl.Call(m, "Get", cID)
	ret0, _ := ret[0].(*Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCharacterStoreMockRecorder) Get(cID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCharacterStore)(nil).Get), cID)
}

// Save mocks base method
func (m *MockCharacterStore) Save(ch *Character) error {
	ret := m.ctrl.Call(m, "Save", ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCharacterStoreMockRecorder) Save(ch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCharacterStore)(nil).Save), ch)
}
